#!/bin/bash
# Compiles an LLVM bitcode file to GCN ISA, and store as HSACO
# $1 = input ll name
# $2 = HSACO code object file name
# $3 = (optional) --amdgpu-target=(GPU family name)
#                          selects AMDGPU target

# enable bash debugging
KMDBSCRIPT="${KMDBSCRIPT:=0}"

# dump the LLVM bitcode
KMDUMPLLVM="${KMDUMPLLVM:=0}"

# dump the isa
KMDUMPISA="${KMDUMPISA:=0}"

# pass extra options to OPT
# KMOPTOPT can be used to pass last-minute options to opt in the backend
# if not set, then "-O3" would be passed to opt
KMOPTOPT="${KMOPTOPT:="-O3"}"

# pass extra options to LLC
# KMOPTLLC can be used to pass last-minute options to llc in the backend
# if not set, then "-O2" will be passed to llc
KMOPTLLC="${KMOPTLLC:="-O2"}"

KMHACKLLVM="${KMHACKLLVM:=0}"

if [ $KMDBSCRIPT == "1" ]
then
  set -x
fi

# check command line arguments
if [ "$#" -lt 2 ]; then
  echo "Usage: $0 input_LLVM output_hsaco_kernel (--amdgpu-target=(GPU family name)" >&2
  echo "  --amdgpu-target=(GPU family name)" >&2
  echo "           selects AMDGPU target" >&2
  exit 1
fi

if [ ! -f $1 ]; then
  echo "input LLVM IR $1 is not valid" >&2
  exit 1
fi

BINDIR=$(dirname $0)
EMBED=$BINDIR/clamp-embed
AS=$BINDIR/llvm-as
OPT=$BINDIR/opt
LLC=$BINDIR/llc
LINK=$BINDIR/llvm-link
LIB=$BINDIR/../lib
LLD=$BINDIR/ld.lld

ROCM_LIB=@ROCM_DEVICE_LIB@

################
# AMDGPU target
################

ARGS="$@"
for ARG in $ARGS
do
  ######################
  # Parse AMDGPU target
  ######################
  case $ARG in
    --amdgpu-target=*)
    AMDGPU_TARGET="${ARG#*=}"
    continue
    ;;
  esac
done

# emit GCN ISA kernel
if [ $KMDUMPLLVM == "1" ]; then
  cp $1 ./dump.input.bc
fi

# Invoke HCC-specific opt passes
# UPGRADE_TBD: temporary suppress warning messages in Promote pass
if [ "$CLAMP_NOTILECHECK" == "ON" ]; then
  $OPT -load $LIB/LLVMPromote@CMAKE_SHARED_LIBRARY_SUFFIX@ \
       -load $LIB/LLVMEraseNonkernel@CMAKE_SHARED_LIBRARY_SUFFIX@ \
       -load $LIB/LLVMRemoveSpecialSection@CMAKE_SHARED_LIBRARY_SUFFIX@ \
       -erase-nonkernels -promote-generic -dce -globaldce -remove-special-section < $1 -o $2.promote.bc
else
  $OPT -load $LIB/LLVMPromote@CMAKE_SHARED_LIBRARY_SUFFIX@ \
       -load $LIB/LLVMEraseNonkernel@CMAKE_SHARED_LIBRARY_SUFFIX@ \
       -load $LIB/LLVMTileUniform@CMAKE_SHARED_LIBRARY_SUFFIX@ \
       -load $LIB/LLVMRemoveSpecialSection@CMAKE_SHARED_LIBRARY_SUFFIX@ \
       -erase-nonkernels -promote-generic -tile-uniform -dce -globaldce -remove-special-section < $1 -o $2.promote.bc
fi

# error handling for HCC-specific opt passes
RETVAL=$?
if [ $RETVAL != 0 ]; then
  echo "Generating AMD GCN kernel failed in HCC-specific opt passes for target: $AMDGPU_TARGET"
  exit $RETVAL
fi

# HACK
if [ $KMHACKLLVM == "1" ]; then
  echo "INJECT HACKED BITCODE"
  cp ./hacked.promote.bc $2.promote.bc
fi

if [ $KMDUMPLLVM == "1" ]; then
  cp $2.promote.bc ./dump.promote.bc
fi

# select appropriate ROCm-Device-Libs per AMDGPU_TARGET
if [ $AMDGPU_TARGET == "fiji" ]; then
  OCLC_ISA_VERSION_LIB="$ROCM_LIB/oclc_isa_version_803.amdgcn.bc"
elif [ $AMDGPU_TARGET == "hawaii" ]; then
  OCLC_ISA_VERSION_LIB="$ROCM_LIB/oclc_isa_version_701.amdgcn.bc"
elif [ $AMDGPU_TARGET == "carrizo" ]; then
  OCLC_ISA_VERSION_LIB="$ROCM_LIB/oclc_isa_version_801.amdgcn.bc"
fi
HCC_BC_LIBS="$ROCM_LIB/hc.amdgcn.bc $ROCM_LIB/opencl.amdgcn.bc $ROCM_LIB/ocml.amdgcn.bc $ROCM_LIB/ockl.amdgcn.bc $ROCM_LIB/irif.amdgcn.bc $OCLC_ISA_VERSION_LIB $ROCM_LIB/oclc_finite_only_off.amdgcn.bc $ROCM_LIB/oclc_daz_opt_off.amdgcn.bc $ROCM_LIB/oclc_correctly_rounded_sqrt_on.amdgcn.bc $ROCM_LIB/oclc_unsafe_math_off.amdgcn.bc"

# include libraries specified through the HCC_EXTRA_LIBRARIES environment variable
HCC_BC_LIBS="$HCC_BC_LIBS  $HCC_EXTRA_LIBRARIES"

$LINK -suppress-warnings -o $2.linked.bc $2.promote.bc $HCC_BC_LIBS

# error handling for llvm-link
RETVAL=$?
if [ $RETVAL != 0 ]; then
  echo "Generating AMD GCN kernel failed in llvm-link with ROCm-Device-Libs for target: $AMDGPU_TARGET"
  exit $RETVAL
fi

if [ $KMDUMPLLVM == "1" ]; then
  cp $2.linked.bc ./dump.linked.bc
fi

# Optimization notes:
#  -disable-simplify-libcalls:  prevents transforming loops into library calls such as memset, memcopy on GPU
$OPT $KMOPTOPT -inline -mtriple amdgcn--amdhsa -mcpu=$AMDGPU_TARGET -disable-simplify-libcalls -verify $2.linked.bc -o $2.opt.bc

# error handling for opt
RETVAL=$?
if [ $RETVAL != 0 ]; then
  echo "Generating AMD GCN kernel failed in opt for target: $AMDGPU_TARGET"
  exit $RETVAL
fi

if [ $KMDUMPLLVM == "1" ]; then
  cp $2.opt.bc ./dump-$AMDGPU_TARGET.opt.bc
fi

$LLC $KMOPTLLC -mtriple amdgcn--amdhsa -mcpu=$AMDGPU_TARGET -filetype=obj -o $2.isabin $2.opt.bc

# error handling for llc
RETVAL=$?
if [ $RETVAL != 0 ]; then
  echo "Generating AMD GCN kernel failed in llc for target: $AMDGPU_TARGET"
  exit $RETVAL
fi

if [ $KMDUMPISA == "1" ]; then
  cp $2.isabin ./dump-$AMDGPU_TARGET.isabin
  $LLC $KMOPTLLC -mtriple amdgcn--amdhsa -mcpu=$AMDGPU_TARGET -filetype=asm -o $2.isa $2.opt.bc
  mv $2.isa ./dump-$AMDGPU_TARGET.isa
fi

$LLD -shared $2.isabin -o $2

# error handling for ld.lld
RETVAL=$?
if [ $RETVAL != 0 ]; then
  echo "Generating AMD GCN kernel failed in ld.lld for target: $AMDGPU_TARGET"
  exit $RETVAL
fi

if [ $KMDUMPISA == "1" ]; then
  cp $2 ./dump-$AMDGPU_TARGET.hsaco
fi

# remove temp file
rm -f $2.promote.bc $2.linked.bc $2.opt.bc $2.isabin $2.isa

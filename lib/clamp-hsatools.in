#!/bin/bash
# Compiles an LLVM bitcode file to HSAIL or GCN ISA

# enable bash debugging
KMDBSCRIPT="${KMDBSCRIPT:=0}"

# dump the LLVM bitcode
KMDUMPLLVM="${KMDUMPLLVM:=0}"

# dump the brig
KMDUMPBRIG="${KMDUMPBRIG:=0}"

# dump the isa
KMDUMPISA="${KMDUMPISA:=0}"

# pass extra options to llc
KMLLOPT="${KMLLOPT:=""}"

if [ $KMDBSCRIPT == "1" ]; then
  set -x
fi

# check command line argument
if [ "$#" -lt 1 ]; then
  echo "Usage: $0 input_LLVM_IR (--amdgpu-target=(fiji | kaveri | carrizo | hawaii))" >&2
  echo "  --amdgpu-target=(fiji | kaveri | carrizo | hawaii)" >&2
  echo "           selects AMDGPU target" >&2
  exit 1
fi

if [ ! -f $1 ]; then
  echo "input LLVM IR $1 is not valid" >&2
  exit 1
fi

BINDIR=$(dirname $0)
HLC_LLVM_LINK=$BINDIR/../../hlc/bin/llvm-link
HLC_OPT=$BINDIR/../../hlc/bin/opt
HLC_LLC=$BINDIR/../../hlc/bin/llc
HLC_ASM=$BINDIR/../../HSAILasm/HSAILasm
NEWLIB=$BINDIR/../../lib



HSA_LLVM_BIN_DIR="${BASH_SOURCE%/*}/../../llvm/bin"
if [ -d "$HSA_LLVM_BIN_DIR" ]; then
    HLC_LLVM_LINK=$HSA_LLVM_BIN_DIR/llvm-link
    HLC_OPT=$HSA_LLVM_BIN_DIR/opt
    HLC_LLC=$HSA_LLVM_BIN_DIR/llc
fi

HSA_USE_AMDGPU_BACKEND=@HSA_USE_AMDGPU_BACKEND@

if [ $HSA_USE_AMDGPU_BACKEND == "ON" ]; then
  LLD=$HSA_LLVM_BIN_DIR/ld.lld
  KM_USE_AMDGPU="${KM_USE_AMDGPU:=1}"
fi

if [ $KMDUMPLLVM == "1" ]; then
  cp $1 ./dump.fe.bc
fi

if [ $KM_USE_AMDGPU ]; then
  HCC_EXTRA_LIBRARIES="$HCC_EXTRA_LIBRARIES $NEWLIB/hsail-amdgpu-wrapper.ll"
fi

$HLC_LLVM_LINK -suppress-warnings -o $1.linked.bc $1 $NEWLIB/builtins-hsail.opt.bc $HCC_EXTRA_LIBRARIES

# error handling for HSAIL llvm-link
RETVAL=$?
if [ $RETVAL != 0 ]; then
  exit $RETVAL
fi

if [ $KMDUMPLLVM == "1" ]; then
  cp $1.linked.bc ./dump.linked.bc
fi

TOPOLOGY_SYSFS_DIR=/sys/devices/virtual/kfd/kfd/topology/nodes

# Prints GPU name for a given Device ID
#   param - Device ID.
deviceIdToGpuName() {
    local deviceId=$1; shift;
    local platformName=""
    case $deviceId in
        1304 | 1305 | 1306 | 1307 | 1309 | 130a | 130b | 130c | 130d | 130e | 130f | \
        1310 | 1311 | 1312 | 1313 | 1315 | 1316 | 1317 | 1318 | 131b | 131c | 131d )
            platformName="kaveri" ;;
        9874 | 9875 | 9876 | 9877 )
            platformName="carrizo" ;;
        7300 )
            platformName="fiji" ;;
        # Polaris11 share the same ISA with Fiji
        67e0 | 67e3 | 67e8 | 67eb | 67ef | 67ff | 67e1 | 67e7 | 67e9 )
            platformName="fiji" ;;
        # Polaris10 share the same ISA with Fiji
        67c0 | 67c1 | 67c2 | 67c4 | 67c7 | 67df | 67c8 | 67c9 | 67ca | 67cc | 67cf )
            platformName="fiji" ;;
        67a0 | 67a1 | 67a2 | 67a8 | 67a9 | 67aa | 67b0 | 67b1 | 67b8 | 67b9 | 67ba | 67be )
            platformName="hawaii" ;;
        * )
            echo "Warning: failed to autodetect target, defaulting to fiji"
            platformName="fiji" ;;
    esac
    echo "$platformName"
}

# Prints GPU Name for the given Node ID
#   param - Node Path
getNodeName() {
    local nodePath=$1; shift;
    local gpuIdInDec=$(cat $nodePath/properties | grep device_id | awk '{print $2}')
    printf -v gpuIdInHex "%x" "$gpuIdInDec"
    local gpuName=$(deviceIdToGpuName $gpuIdInHex)
    echo "$gpuName"
}

# Prints the name of the first HSA node with a GPU associated with it
getDefaultHsaNodeName() {
    for i in $(find $TOPOLOGY_SYSFS_DIR  -maxdepth 1 -mindepth 1 -type d); do
        local simdcount=$(cat $i/properties | grep simd_count | awk '{print $2}')
        if [ $simdcount != 0 ]; then
            echo "$(getNodeName $i)"
            return
        fi
    done
}

################
# AMDGPU target 
################

AMDGPU_TARGET=@AMDGPU_TARGET@

ARGS="$@"
for ARG in $ARGS
do
  ######################
  # Parse AMDGPU target
  ######################
  case $ARG in
    --amdgpu-target=*)
    AMDGPU_TARGET="${ARG#*=}"
    continue
    ;;
  esac
done

if [ "$AMDGPU_TARGET" == "auto" ]; then
    AMDGPU_TARGET="$(getDefaultHsaNodeName)"
fi


# Optimization notes:
#  -disable-simplify-libcalls:  prevents transforming loops into library calls such as memset, memcopy on GPU 

if [ $KM_USE_AMDGPU ]; then
  # KMOPTOPT can be used to pass last-minute options to opt in LC backend
  $HLC_OPT $KMOPTOPT -O3 -mtriple amdgcn--amdhsa -mcpu=$AMDGPU_TARGET -disable-simplify-libcalls -verify $1.linked.bc -o $1.opt.bc
else
  $HLC_OPT -O3 -disable-simplify-libcalls -verify $1.linked.bc -o $1.opt.bc
fi

# error handling for HSAIL opt
RETVAL=$?
if [ $RETVAL != 0 ]; then
  exit $RETVAL
fi

if [ $KMDUMPLLVM == "1" ]; then
  cp $1.opt.bc ./dump.opt.bc
fi

if [ $KM_USE_AMDGPU  ]; then
  $HLC_LLC -O2 -mtriple amdgcn--amdhsa -mcpu=$AMDGPU_TARGET -filetype=obj -o $1.hsail $1.opt.bc
  if [ $KMDUMPISA == "1" ]; then
    $HLC_LLC -O2 -mtriple amdgcn--amdhsa -mcpu=$AMDGPU_TARGET -filetype=asm -o $1.isa $1.opt.bc
    mv $1.isa ./dump.isa
  fi
else
  $HLC_LLC -O2 -march=hsail64 -filetype=asm -o $1.hsail $1.opt.bc
fi

# error handling for HSAIL llc
RETVAL=$?
if [ $RETVAL != 0 ]; then
  exit $RETVAL
fi

if [ $KMDUMPBRIG == "1" ]; then
    cp $1.hsail ./dump.hsail
fi

if [ $KM_USE_AMDGPU ]; then
  $LLD  -shared $1.hsail -o $1.brig
else
  cat $NEWLIB/hsa_builtins.hsail >> $1.hsail
  $HLC_ASM -assemble -o $1.brig $1.hsail
fi

# error handling for HSAILasm
RETVAL=$?
if [ $RETVAL != 0 ]; then
  exit $RETVAL
fi

if [ $KMDUMPBRIG == "1" ]; then
    cp $1.brig ./dump.hsa_builtins.brig
fi

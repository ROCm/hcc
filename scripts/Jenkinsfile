#!/usr/bin/env groovy

import java.text.SimpleDateFormat

//===----------------------------------------------------------------------===//
// Helpers.                                                                   //
//===----------------------------------------------------------------------===//
// test

def dump(timestamp) { 

   sh (script: "tar -cvf hcc.tar 2> tar.out") 

}


def autoclean_node(name, commands) {
  node (name) {
    def workspace = pwd()
    try {
      deleteDir()
      commands()
    } finally {
      dir (workspace) {
        deleteDir()
      }
    }
  }
}

def git_config() {
  def git_email = "dsalinas@amd.com" // "jenkins-compute@amd.com"
  def git_name = "David Salinas" // Jenkins Compute"

  sh (script:"git config user.email ${git_email}")
  sh (script:"git config user.name ${git_name}")
}

def String timestamp = new SimpleDateFormat("yyyyMMddHHmm").format(new Date())

//def get_dateString() {
//	def dateFormat = new SimpleDateFormat("yyyyMMddHHmm")
//	def date = new Date()
//}

//def merge(subcomponent_name,checkout_origin_branch,merge_source) { 
//	def dateFormat = new SimpleDateFormat("yyyyMMddHHmm")
//	def date = new Date()
//	String merge_name = "auto_merge_" + timestamp   // dateFormat.format(date)
//	sh (script: "cd hcc_fork/${subcomponent_name}; git config user.email dsalinas@amd.com; git config user.name David Salinas; git fetch --all ; git checkout -b ${merge_name} origin/${ checkout_origin_branch}; git merge ${merge_source} --no-edit")
//}				

 def git_remote_add(workspace, remote_name, remote_url) {
	sh (script:"cd ${ workspace}; git remote add ${remote_name} ${remote_url}")
 }
 
 def send_email(status) {
  emailext (
    to: 'dsalinas@amd.com',
    subject: "${status}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
    body: "${status}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'; see console output at ${env.BUILD_URL}"
  )
  dump()
}

node ('rocmtest')  
{
 stage('HCC Checkout')
  {
    deleteDir()
    checkout([
      $class: 'GitSCM',
      branches: scm.branches,
      doGenerateSubmoduleConfigurations: scm.doGenerateSubmoduleConfigurations,
      extensions: scm.extensions + [[$class: 'CleanCheckout'], [$class: 'SubmoduleOption', disableSubmodules: false, parentCredentials: false, recursiveSubmodules: true, reference: '', timeout: 60, trackingSubmodules: false]],
      userRemoteConfigs: scm.userRemoteConfigs
    ])
  }
  
  def hcc_build_image = null
  stage('ubuntu-16.04 image')
  {
    def user_uid = sh( script: 'id -u', returnStdout: true ).trim()
   
    def build_type_name = "upstream-merge-ubuntu-16.04"
    def dockerfile_name = "dockerfile-${build_type_name}"
    def build_image_name = "${build_type_name}"
    def dateFormat = new SimpleDateFormat("yyyyMMddHHmm")
	def date = new Date()
	
    dir('docker')
    {
       hcc_build_image = docker.build( "david-salinas/${build_image_name}:latest", "-f ${dockerfile_name} --build-arg build_type=Release --build-arg user_uid=${user_uid} --build-arg rocm_install_path=/opt/rocm ." )
    }
  }
 
// JENKINS-33510: the jenkinsfile dir() command is not workin well with docker.inside()
  hcc_build_image.inside( '--device=/dev/kfd' )
  {
   String build_org = "david-salinas"
   String merge_name = "auto_merge_" + dateFormat.format(date)
   String user_email = "dsalinas@amd.com"
   
  try { 
//		stage ('Clone HCC with repo') 
//		{ 
//		    deleteDir()
//			sh (script: "repo init -u https://github.com/RadeonOpenCompute/HCC-Native-GCN-ISA.git")
//			sh (script: "repo sync")
//			if (!fileExists("manifest")) {
//			  sh (script:"git clone https://github.com/RadeonOpenCompute/HCC-Native-GCN-ISA.git manifest")
//			}
//		}
		
//		stage('Clone HCC repo manifest') { 
//			  sh (script:"git clone https://github.com/RadeonOpenCompute/HCC-Native-GCN-ISA.git manifest")
//		}
		
		stage('Initialize GIT submodules') { 
		// deleteDir()
		//	if (!fileExists("hcc_fork")) {
				//sh (script:"git clone https://github.com/david-salinas/hcc.git hcc_fork")  
				sh (script:"git clone https://github.com/${build_org}/hcc.git hcc_fork")
				sh (script: 'cd hcc_fork; git checkout clang_tot_upgrade; git submodule update --init')
			//}
		}
		
		stage ('Add all remotes and forks for submodules') {
			git_remote_add("hcc_fork","hcc_fork", "https://github.com/david-salinas/hcc.git");
			git_remote_add("hcc_fork/lld","lld_fork", "https://github.com/david-salinas/lld.git");
			git_remote_add("hcc_fork/compiler","llvm_fork", "https://github.com/david-salinas/llvm.git");
			git_remote_add("hcc_fork/compiler-rt","compiler-rt_fork", "https://github.com/david-salinas/compiler-rt.git");
			git_remote_add("hcc_fork/compiler-rt","compiler-rt", "https://github.com/llvm-mirror/compiler-rt.git");
			git_remote_add("hcc_fork/clang-tools-extra","clang-tools-extra_fork", "https://github.com/david-salinas/clang-tools-extra.git");
			git_remote_add("hcc_fork/clang-tools-extra","clang-tools-extra", "https://github.com/llvm-mirror/clang-tools-extra.git");
			git_remote_add("hcc_fork/clang","clang_fork", "https://github.com/david-salinas/hcc-clang-upgrade.git");
			git_remote_add("hcc_fork/clang","clang", "https://github.com/RadeonOpenCompute/clang");			
		}
		
		stage ('Checkout latest master ROCM-Device-Libs') {
			sh (script: "cd hcc_fork/rocdl; git fetch --all; git checkout origin/master")
		}
				
		stage ('Merge amd-common LLD commits') {
			//def dateFormat = new SimpleDateFormat("yyyyMMddHHmm")
			//def date = new Date()
			//String merge_name = "auto_merge_" + dateFormat.format(date)
			sh (script: "cd hcc_fork/lld; git config user.email ${ user_email}; git config user.name David Salinas; git fetch --all ; git checkout -b ${merge_name} origin/amd-hcc; git merge origin/amd-common --no-edit")
		}
		
		stage ('Merge amd-common LLVM commits') {
			//def dateFormat = new SimpleDateFormat("yyyyMMddHHmm")
			//def date = new Date()
			//String merge_name = "auto_merge_" + dateFormat.format(date)
			sh (script: "cd hcc_fork/compiler; git config user.email ${ user_email}m; git config user.name David Salinas; git fetch --all ; git checkout -b ${merge_name} origin/amd-hcc; git merge origin/amd-common --no-edit")
		}
		
		stage ('Merge amd-common COMPILER-RT commits') {
		//	def dateFormat = new SimpleDateFormat("yyyyMMddHHmm")
		//	def date = new Date()
		//	String merge_name = "auto_merge_" + dateFormat.format(date)
			sh (script: "cd hcc_fork/compiler-rt; git config user.email ${ user_email}; git config user.name David Salinas; git fetch --all ; git checkout -b ${merge_name} origin/amd-hcc; git merge --no-ff compiler-rt/master --no-edit")
		}
		
		stage ('Merge amd-common CLANG-TOOLS-EXTRA commits') {
		//	def dateFormat = new SimpleDateFormat("yyyyMMddHHmm")
		//	def date = new Date()
		//	String merge_name = "auto_merge_" + dateFormat.format(date)
			sh (script: "cd hcc_fork/clang-tools-extra; git config user.email ${ user_email}m; git config user.name David Salinas; git fetch --all ; git checkout -b ${merge_name} origin/amd-hcc; git merge clang-tools-extra/master --no-edit")
		}
		
		stage ('Merge amd-common Clang commits') {
		//	def dateFormat = new SimpleDateFormat("yyyyMMddHHmm")
		//	def date = new Date()
		//	String merge_name = "auto_merge_" + dateFormat.format(date)
			sh (script: "cd hcc_fork/clang; git config user.email ${ user_email}; git config user.name David Salinas; git fetch --all ; git checkout -b ${merge_name} origin/clang_tot_upgrade; git merge --no-ff clang/amd-common --no-edit")
		}
		
		stage ('Build merged HCC') {
			sh (script: "mkdir -p build; cd build; cmake -DCMAKE_BUILD_TYPE=Release ../hcc; make -j10")
		}
		
		stage ('Full sanity tests on merged HCC') {
			sh (script: "cd build; make test")
		}
		
		
		stage ('Quick sanity tests on merged HCC') {
			sh (script: "bash bin/hcc `bin/clamp-config --build --cxxflags --ldflags` -lm ~/hcc/tests/Unit/AmpMath/amp_math_cos.cpp; ./a.out ")
			sh (script: "bash bin/hcc `bin/hcc-config --build --cxxflags --ldflags` -lhc_am ~/hcc/tests/Unit/GridLaunch/glp_const.cpp; ./a.out ")
			sh (script: "bash bin/hcc `bin/hcc-config --build --cxxflags --ldflags` ~/hcc/tests/Unit/HC/hc_atomic_add_global.cpp ; ./a.out ")
		}
		
		
		stage('Push and Create Pull Request for clang') {
			sh (script: "cd hcc_fork/clang; git push clang_fork ${merge_name}:${merge_name}")
			sh (script: "cd hcc/clang; git request-pull https://github.com/david-salinas/hcc-clang-upgrade clang_tot_upgrade")
		}
		
		stage('Push and Create Pull Request for lld') {
		
		}
		
		stage('Push and Create Pull Request for llvm') {
		
		}
		
		
		stage('Push and Create Pull Request for compiler-rt') {
		
		}
		
		stage('Push and Create Pull Request for clang-tools-extra') {
		
		}
		
	} catch(e) {
	   send_email("FAILED")
	  throw e
	}
	
  } // end of docker container
}  // end of node

#!/usr/bin/env groovy
//===----------------------------------------------------------------------===//
// Helpers.                                                                   //
//===----------------------------------------------------------------------===//

def autoclean_node(name, commands) {
  node (name) {
    def workspace = pwd()
    try {
      deleteDir()
      commands()
    } finally {
      dir (workspace) {
        deleteDir()
      }
    }
  }
}

 def git_remote_add(workspace, remote_name, remote_url) {
   dir(workspace) {
    if (fileExists(remote_name)) {
     sh "echo already exists"
    } else { 
      sh returnStatus, "git remote add ${remote_name} ${remote_url}"
    }
  }
 }
 
 def send_email(status) {
  emailext (
    to: 'dsalinas@amd.com',
    subject: "${status}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
    body: "${status}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'; see console output at ${env.BUILD_URL}"
  )
}

node ('rocmtest') 
{
 stage('HCC Checkout')
  {
    checkout([
      $class: 'GitSCM',
      branches: scm.branches,
      doGenerateSubmoduleConfigurations: scm.doGenerateSubmoduleConfigurations,
      extensions: scm.extensions + [[$class: 'CleanCheckout'], [$class: 'SubmoduleOption', disableSubmodules: false, parentCredentials: false, recursiveSubmodules: true, reference: '', timeout: 60, trackingSubmodules: false]],
      userRemoteConfigs: scm.userRemoteConfigs
    ])
  }
  
  def hcc_build_image = null
  stage('ubuntu-16.04 image')
  {
    def user_uid = sh( script: 'id -u', returnStdout: true ).trim()
    def build_org = "david-salinas"
    def build_type_name = "upstream-merge-ubuntu-16.04"
    def dockerfile_name = "dockerfile-${build_type_name}"
    def build_image_name = "${build_type_name}"
    dir('docker')
    {
       hcc_build_image = docker.build( "${build_org}/${build_image_name}:latest", "-f ${dockerfile_name} --build-arg build_type=Release --build-arg user_uid=${user_uid} --build-arg rocm_install_path=/opt/rocm ." )
    }
  }
 
// JENKINS-33510: the jenkinsfile dir() command is not workin well with docker.inside()
  hcc_build_image.inside( '--device=/dev/kfd' )
  {
 // try { 
		stage ('Clone HCC with repo') 
		{ 
			if (fileExists("hcc_fork")) {
		    	sh "echo hcc_fork"
			} else { 
			    sh "repo init -u https://github.com/RadeonOpenCompute/HCC-Native-GCN-ISA.git"
			    sh "repo sync"
			}
		}
		
		stage('Initialize GIT submodules') { 
		  if (fileExists("hcc_fork")) {
		    sh "cd hcc_fork"
		  }else {
		   sh "git clone https://github.com/david-salinas/hcc.git hcc_fork"
		   sh "cd hcc_fork"
		  }
		   
		   sh "git checkout clang_tot_upgrade"
		   sh "git submodule update --init"
		}
		
		stage ('Add all remotes and forks for submodules') {
			sh "cd hcc_fork"
			// sh "git remote add hcc_fork https://github.com/david-salinas/hcc.git"
			git_remote_add("hcc_fork", "https://github.com/david-salinas/hcc.git");
			sh "cd lld"
			git_remote_add("lld_fork", "https://github.com/david-salinas/lld.git");
			sh "cd compiler"
			git_remote_add("llvm_fork", "https://github.com/david-salinas/llvm.git");
			sh "cd compiler_rt"
			git_remote_add("compiler-rt_fork", "https://github.com/david-salinas/compiler-rt.git");
			git_remote_add("compiler-rt", "https://github.com/llvm-mirror/compiler-rt.git");
			sh "cd clang-tools-extra"
			git_remote_add("clang-tools-extra_fork", "https://github.com/david-salinas/clang-tools-extra.git");
			git_remote_add("clang-tools-extra", "https://github.com/llvm-mirror/clang-tools-extra.git");
			sh "cd clang"
			git_remote_add("clang_fork", "https://github.com/david-salinas/hcc_clang_upgrade.git");
			git_remote_add("clang", "https://github.com/RadeonOpenCompute/clang.git");
			
		}
		
		stage ('Checkout latest master ROCM-Device-Libs') {
			// cd hcc_fork
			sh "cd rocdl"
			sh "git fetch --all"
			sh "git checkout origin/master"
			sh "cd ../"
		}
		
		
		stage ('Merge amd-common LLD commits') {
			// cd hcc_fork
			sh "cd lld"
			sh "git fetch --all"
			sh "git checkout -b merge_YYYYMMDD origin/amd-hcc"
			sh "git merge origin/amd-common --no-edit"
		}
		
//	} catch(e) {
//	   send_email("FAILED")
//	  throw e
//	}
  }
}
